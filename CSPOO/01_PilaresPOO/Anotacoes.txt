POO - Programação Orientada a Objetos

A Programação Orientada a Objetos (POO) é uma abordagem para desenvolvimento de software no qual a estrutura do software é baseada em objetos que interagem uns com os outros para realizar uma tarefa.
Essa interação toma a forma de mensagens que são trocadas entre os objetos sendo que em resposta a uma mensagem um objeto pode executar uma ação ou método.

O mundo é um sistema orientado a objetos
O Software e o paradigma da Orientação a Objetos


##############################################################################################################################

Os conceitos sobre POO não são novos

Os conceitos de POO começaram a aparecer em meados dos anos 60 com uma linguagem chamada Simula e evoluiu nos anos 70 com o advento  da linguagem SmallTalk.
Porque a abordagem do paradigma da POO tem se desenvolvido de forma a ser amplamente utilizada para resolver os problemas de negócios dos dias atuais?

##############################################################################################################################

Problemas da Programação Procedural
- Manutenção mais difícil
- Difícil alterar funcionalidades existentes sem ter que alterar tudo.
- Pouco reaproveitamento de código com pouco retorno sobre investimento anteriores.
- A programação não era voltada a equipes o programador era um faz tudo.
- Difícil tradzir  os modelos de negócios em modelos de programação.
- A integração entre os diversos sistemas era caótica.

##############################################################################################################################

Vantagens da aobrdagem Orientada a Objetos (POO)

- Uma transição mais intuitiva dos modelos de análise de negócios para a implementação do software;
- A capacidade de manter e implementar mudanças nos programas de forma mais rápida e eficiente;
- A capacidade de criar sistemas de software através de um processo de equipe, permitindo a especialista trabalharem em partes do sistema;
- A capacidade de reutilização de componentes de código em outros programas e a aquisição de componentes escritos por desenvolvedores de terceiros para aumentar a funcionalidade dos seus programas com pouco esforço;
- Uma melhor integração com sistemas distrubuídos e com baixo acomplamento;
- Uma melhor integração com sistemas operacionais modernos;
- A capacidade de criar uma interface de usuário gráfica intuitiva para os usuários;

##############################################################################################################################

As características da POO

Um objeto é uma estrutura que incorpora dados e comportamentos para trabalhar com esses dados.

Um objeto é uma instância de uma classe.

Onde a classe é o tipo e o objeto é uma instância do tipo.
Ex:
	classe: Produto -> objeto: caderno, livro, celular, mouse, etc.
	classe: Cliente -> objeto: Macoratti, Maria, Pedro, etc.


	
	
		Classe
   ---  Carro---------
  |		  |			 |
Audi	Nissan		Volvo

##############################################################################################################################

Abstração

Abstração em programação de computadores é uma forma de reduzir a complexidade e tornar o projeto e a implementação mais eficiente em sistemas complexos de software.
Abstrair é a habilidade de se concentra nos aspectos essenciais de um contexto qualquer, ignorando características menos importantes, ou seja, são propriedades comuns de um conjunto de objetos, omitindo os detalhes.
Sem esta capacidade de abstrair ou filtrar as propriedades de objetos você teria muita dificuldade para processar o excesso de informação que bombardeia você e se concentrar na tarefa em mãos.

##############################################################################################################################

Encapsulamento

O encapsulamento é o processo no qual o acesso direto aos dados de um objeto não é permitido. Ele esta ocultado e protegido.
Ao usar o encapsulamento o código de cada objeto deve controlar apenas seu próprio estado.
O encapsulamento adiciona segurança à aplicação pelo fato de esconder as propriedades dos objetos do acesso direto criando uma espécie de caixa preta.
No encapsulamento o objeto esconde seus dados de outros objetos e permite que os dados sejam acessados por intermédio de seus próprios métodos.

##############################################################################################################################

Herança

A herança é um recurso da POO que permite que você crie novas classes que reutilizam, estendem e modificam o comportamento definido em outras classes existentes.
A classe cujos membros são herdados é chamada classe base e a classe que herda esses membros é chamada classe derivada.
A classe base fornece uma funcionalidade comum (dados e comportamento) e as classes derivadas herdam ou substituem essa funcionalidade.
Ex:

Classe Mãe | Classe Filha 1	| Classe Filha 2 | Classe Filha 3
		   |				|				 |
Pessoa.cs  | Aluno.cs		| Professor.cs	 | Funcionario.cs

##############################################################################################################################

Polimorfismo

Polimorfismo (do grego: poli = muitas morphos = formas) é a habilidade de objetos distintos responderem a mesma mensagem de a sua própria maneira.
Você pode enviar a mensagem mover para cada objeto semelhante a um veículo e cada um vai se comportar de maneira diferente para atender a sua solicitação.
Quando uma mesma mensagem pode ser processada de diferentes formas temos um exemplo de polimorfismo.
Usando polimorfismo podemos invocar métodos da classe derivada através da classe base em tempo de execução, e, permitir que classes forneçam diferentes implementações de métodos que são chamados com o mesmo nome;