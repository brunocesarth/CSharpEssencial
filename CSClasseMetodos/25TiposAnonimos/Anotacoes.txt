Tipos anônimos : Conceito
Um tipo anônimo é um tipo(classe) sem nenhum nome que pode conter apenas propriedades públicas somente leitura.
O tipos anônimos fornecem uma mmaneira conveniente para encapsular um conjunto de propriedades somente leitura em um único objeto sme precisar peimeiro definir explicatamente um tipo.
O nome do tipo é gerado pelo compilador e não está disponível no código-fonte e o tipo de cada propriedade é inferido pelo compilador. 

Tipos anônimos : Inicialização
Um tipo anônimo é inicializado usando o operador new, em combinação com um inicializador de objetos.
Como não há nenhuma classe por trás do objeto, você deve usar a palavra-chave var ao recuperar a referência ao seu objeto.

var aluno = new 
{
	Nome = "Maria",
	Idade = 42
};

Console.WriteLine(aluno.Nome + " - " + aluno.Idade + " anos");


Tipos anônimos : Exemplo
Um tipo anônimo pode ter uma propriedade de outro tipo anônimo:

var aluno = new
{
	Id = 1,
	Nome = "Jairo",
	Email = "jairo@email.com",
	Endereco = new {Id = 1, Cidade = "Santos", Pais = "Brasil"}
};

Podemos criar um array de tipos anônimos:

var alunos = new[]{
			 new {Id = 1, Nome = "Maria", Email = "maria@email.com"},
			 new {Id = 2, Nome = "Sonia", Email = "sonia@email.com"},
			 new {Id = 3, Nome = "Bruno", Email = "bruno@email.com"}
};


Tipos anônimos : Carcterísticas
São os tipos referência que derivam diretamente de Object
Contêm uma ou mais propriedades públicas somente leitura.
Nenhum outro tipo de membro de classe, como métodos ou eventos, é válido e a expressão usada para inicializar uma propriedade não pode ser nula, uma função anônima ou um tipo de ponteiro.
Se dois ou mais tipos anônimos tiverem o mesmo número e tipo de propriedades na mesma ordem, o compilador irá tratá-los como o mesmo tipo e eles compartilham as mesmas informações de tipo gerado pelo compilador.
Sempre será local para o métdo no qual for definido e não pode ser retornado do método.
Pode ser passado para outro método como parâmetro de tipo de objeto, mas isso não é recomendado.

Tipos anônimos são normalmente usados em uma cláusula Select de uma expressão de consulta, geralmente com a LINQ, para retornar um subconjunto das propriedades de cada objeto na sequência de origem.